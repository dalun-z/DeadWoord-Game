/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cs345.deadwood;

import java.util.*;

public class Deadwood {
    
    public static void main(String[] args) {
        // BoardView boardView = new BoardView();
        // ArrayList<Player> players = new ArrayList<Player>();
        // ArrayList<Scene> scenes = new ArrayList<Scene>();
        // HashMap<String, Location> locations = new HashMap<String, Location>();
        // Integer days;
        // Player currentPlayer;

        GameState global = GameState.getInstance();

        parsingXML parser = new parsingXML();

        parser.parseBoard(global.locations);
        parser.parseCards(global.scenes);

        Collections.shuffle(global.scenes);

        int iter = 0;
        for(String key : global.locations.keySet()) {
            Location currentLoc = global.locations.get(key);
            currentLoc.setScene(global.scenes.get(iter++));
        }

        LaunchPage launchPage = new LaunchPage();
        
        synchronized(launchPage) {
            try {
                launchPage.wait();
            } catch (InterruptedException e) {
                System.out.println("Interrupted");
            }
        }

        global.days = global.players.size() <= 3 ? 3 : 4;
        global.currentPlayer = global.players.get(0);

        System.out.println("Days: " + global.days);
        System.out.println("First player: " + global.currentPlayer.getPlayer());

        while (global.days > 0) {
            System.out.println("doing game loop");

            synchronized(global) {
                try {
                    global.wait();
                } catch (InterruptedException e) {
                    System.out.println("Action await interrupted");
                }
            }

            if (global.action == "move") {
                System.out.println("Player moving");
                //TODO
                try {
                    synchronized(global.boardView) {
                        global.boardView.wait();
                    }
                } catch (InterruptedException e) {
                    System.out.println("Destination selection interrupted");
                }

                global.nextPlayer();
                System.out.println("Current player: " + global.currentPlayer.getPlayer());
            } else if (global.action == "pass") {
                System.out.println("Player passed");
                //TODO

                global.nextPlayer();
                System.out.println("Current player: " + global.currentPlayer.getPlayer());
            } else if (global.action == "act") {
                System.out.println("Player is acting");
                //TODO

                global.nextPlayer();
                System.out.println("Current player: " + global.currentPlayer.getPlayer());
            }
        }
    }
}